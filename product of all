import java.util.ArrayList;

public class Solution {
    public ArrayList<Integer> solve(ArrayList<Integer> A) {
        int size = A.size();
        ArrayList<Integer> b = new ArrayList<>();
        int val = 1;

        
        for (int i = 0; i < size; i++) {
            val = (int) ((long) val * A.get(i) % 1000000007);
        }

        
        for (int i = 0; i < size; i++) {
            int add = (int) ((long) val * modInverse(A.get(i), 1000000007) % 1000000007);
            b.add(add);
        }

        return b;
    }

    // Function to calculate modular inverse using extended Euclidean algorithm
    private int modInverse(int a, int m) {
        int m0 = m;
        int y = 0, x = 1;

        if (m == 1)
            return 0;

        while (a > 1) {
            int q = a / m;
            int t = m;

            m = a % m;
            a = t;
            t = y;

            y = x - q * y;
            x = t;
        }

        if (x < 0)
            x += m0;

        return x;
    }
}
